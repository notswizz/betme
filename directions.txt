# BetChat Application Architecture and Flow

## Overview
BetChat is an AI-powered sports betting assistant that enables users to place bets through a sophisticated chat interface. The application features a modern, gradient-rich UI with real-time updates and mobile-first design.

## Core Components

### 1. Message Processing Pipeline
- User message → process.js
- Authentication with JWT token
- Token balance verification
- Message type handling:
  * Regular text messages
  * Bet slips
  * Image uploads (OCR)
  * Action confirmations
  * Bet success messages
  * Open bets display

### 2. AI Integration
- Venice AI Integration:
  * Uses llama-3.3-70b model
  * Structured responses:
    - Conversational part (natural language)
    - JSON intent part (structured data)
  * Custom prompt system for betting context
  * Intent analysis and action routing
  * Memoized responses for performance

### 3. Image Processing
- Tesseract.js OCR Integration:
  * Betting-specific text cleanup
  * Format standardization:
    - Score formats (e.g., "1-0")
    - Odds formats (e.g., "-110")
    - Currency formatting
    - Dates and times
  * Team name normalization
  * Betting terminology standardization

### 4. Chat Interface
Components:
- ChatContainer.js: Main chat orchestration with memoization
- ChatMessage.js: Message type rendering with optimized re-renders
- ChatInput.js: Text & image input
- BetSlipMessage.js: Memoized bet form handling
- ActionConfirmation.js: Bet confirmation
- BetSuccessMessage.js: Success display
- OpenBetsView.js: Scrollable bet listings

Features:
- Real-time message updates
- Smart message grouping
- Mobile-responsive design
- Image upload support
- Loading states and animations
- Error handling and recovery
- Memoized components for performance
- Optimized re-rendering

### 5. Betting System
Data Structure (Bet.js):
```javascript
{
  userId: ObjectId,
  type: ["Spread", "Moneyline", "Over/Under", "Parlay", "Prop", "Future"],
  sport: String,
  team1: String,
  team2: String,
  line: String, // 'ML' for Moneyline bets
  odds: Number,
  stake: Number,
  payout: Number,
  status: ["pending", "won", "lost", "cancelled"],
  createdAt: Date,
  updatedAt: Date
}
```

Betting Flow:
1. User initiates bet (text/image)
2. AI processes request:
   - Intent analysis
   - Bet type detection
   - Team/odds extraction
3. BetSlipMessage displays form:
   - Sport & type selection
   - Team input with validation
   - Line & odds with ML handling
   - Memoized stake & payout calculation
4. Real-time payout calculation:
   ```javascript
   const calculatePayout = useCallback((stake, odds) => {
     if (odds > 0) {
       return stake + (stake * odds) / 100;
     } else {
       return stake + (stake * 100) / Math.abs(odds);
     }
   }, []);
   ```
5. User confirms bet
6. Success confirmation with bet ID and details

### 6. Sports API Integration

#### API Configuration
- Provider: RapidAPI Basketball API
- Base URL: https://api-basketball.p.rapidapi.com
- League Focus: NBA (League ID: 12)
- Authentication: API Key via headers

#### Data Structures
Game Data Format:
```javascript
{
  id: String,
  league: 'NBA',
  status: String,  // 'NS', 'LIVE', 'FT', 'HT', etc.
  quarter: String, // Current quarter or game status
  timeLeft: String,
  team1: {
    name: String,
    logo: String,
    score: Number,
    quarterScores: {
      q1: Number,
      q2: Number,
      q3: Number,
      q4: Number,
      ot: Number
    }
  },
  team2: {
    name: String,
    logo: String,
    score: Number,
    quarterScores: {
      q1: Number,
      q2: Number,
      q3: Number,
      q4: Number,
      ot: Number
    }
  },
  venue: String,
  date: Date
}
```

#### Features
1. Data Caching:
   - 5-minute cache duration
   - Cache key format: `games_${date}_${season}`
   - Automatic cache invalidation
   - Fallback to cache on rate limits

2. Season Handling:
   - Dynamic season calculation
   - Format: "YYYY-YYYY"
   - Season transition in October
   - Automatic season detection based on date

3. Date Management:
   - Timezone handling (America/New_York)
   - Date normalization to noon
   - Consistent UTC conversion
   - Date range selection (±7 days)

4. Rate Limiting:
   - Header tracking (x-ratelimit-requests-limit)
   - Remaining requests monitoring
   - Automatic retry with exponential backoff
   - Cache fallback on 429 errors

5. Game Status Mapping:
   ```javascript
   const statusDisplay = {
     'NS': 'Not Started',
     'FT': 'Final',
     'HT': 'Halftime',
     'Q1': '1st Quarter',
     'Q2': '2nd Quarter',
     'Q3': '3rd Quarter',
     'Q4': '4th Quarter',
     'AOT': 'After OT',
     'POST': 'Postponed'
   }
   ```

6. Auto-Refresh Logic:
   - 30-second intervals for live games
   - Only active for current day's games
   - Automatic cleanup on component unmount
   - Conditional refresh based on game status

7. Error Handling:
   - API error classification
   - Rate limit detection
   - Network error recovery
   - Invalid data handling
   - Retry mechanism with backoff

8. Performance Optimization:
   - Memoized data formatting
   - Efficient date comparisons
   - Minimal re-renders
   - Cached API responses
   - Optimized data structures

### 7. UI Components
1. Side Menu:
   - New chat button
   - Token balance
   - Bet statistics
   - Mobile slide-out with blur
   - Memoized components

2. Chat Messages:
   - Gradient backgrounds
   - Role-based styling
   - Type-specific rendering
   - Interactive elements
   - Optimized re-renders

3. Bet Display:
   - Sport & type badges
   - Team matchup
   - Line & odds with ML support
   - Stake & payout
   - Action buttons
   - Scrollable layout

### 8. Error Handling
1. API Errors:
   - Token validation
   - Balance checks
   - Rate limiting
   - Fallback responses
   - Detailed error messages

2. Image Processing:
   - OCR failure handling
   - Format validation
   - Fallback to manual input
   - Error recovery

3. Bet Validation:
   - Input validation
   - Balance verification
   - Odds calculation
   - Status tracking
   - Line validation for bet types

### 9. State Management
1. Conversation State:
   - Message history
   - Conversation ID
   - Loading states
   - Error states
   - Memoized updates

2. User State:
   - Authentication
   - Token balance
   - Bet history
   - Statistics
   - Cached data

3. UI State:
   - Mobile menu
   - Form states
   - Loading indicators
   - Error messages
   - Optimized updates

### 10. Security
1. Authentication:
   - JWT tokens
   - Token validation
   - Session management
   - Secure storage
   - Rate limiting

2. API Security:
   - Rate limiting
   - Input sanitization
   - Error handling
   - Secure endpoints
   - Data validation

### 11. Mobile Optimization
1. Responsive Design:
   - Mobile-first approach
   - Touch-friendly inputs
   - Slide-out menu
   - Bottom-anchored input
   - Adaptive layouts

2. Performance:
   - Optimized images
   - Efficient state updates
   - Smooth animations
   - Loading states
   - Memoized components
   - Reduced re-renders

## Development Guidelines

### 1. Component Structure
- Maintain separation of concerns
- Use TypeScript for type safety
- Follow React best practices
- Implement proper error boundaries
- Use memoization where beneficial

### 2. Styling
- Use Tailwind CSS
- Maintain consistent gradients
- Follow spacing system
- Ensure accessibility
- Optimize for mobile

### 3. Error Handling
- Provide user feedback
- Implement fallbacks
- Log errors properly
- Maintain state consistency
- Validate inputs

### 4. Testing
- Unit test components
- Test API endpoints
- Validate bet calculations
- Check error scenarios
- Test mobile responsiveness

### 5. Performance
- Optimize bundle size
- Implement lazy loading
- Cache API responses
- Monitor metrics
- Minimize re-renders
- Use memoization effectively 