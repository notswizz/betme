# Directions

This document provides an in-depth explanation of the codebase, focusing on the key files and their functionalities. The application is an AI-powered sports betting assistant that allows users to interact via a chat interface, place bets, and receive sports-related information.

---

## Table of Contents

1. [Overview](#overview)
2. [Key Components](#key-components)
   - [ActionConfirmation.js](#actionconfirmationjs)
   - [analyze.js](#analyzejs)
   - [chat.js](#chatjs)
   - [venice.js](#venicejs)
   - [index.js](#indexjs)
   - [mongodb.js](#mongodbjs)
   - [convoAnalyze.js](#convoanalyzejs)
   - [process.js (Chat)](#processjs-chat)
   - [process.js (Bet)](#processjs-bet)
3. [Flow of User Interaction](#flow-of-user-interaction)
4. [Environment Variables](#environment-variables)
5. [Additional Notes](#additional-notes)

---

## Overview

The application is built with Next.js and provides a platform for users to engage with an AI assistant for sports betting. It integrates AI models to analyze bets, process user intents, and handle conversations, enhancing the user experience by providing real-time analysis and responses.

---

## Key Components

### ActionConfirmation.js

**Location:** `components/chat/ActionConfirmation.js`

This React component renders a confirmation dialog for actions that require user confirmation, such as adding tokens, creating listings, or placing bets.

#### Key Functions:

- **getActionDescription(action):** Generates a description based on the action type.
  - For `add_tokens`, it returns `"Add X tokens to your balance"`.
  - For `create_listing`, it returns `"Create listing 'Title' for X tokens"`.
  - For `place_bet`, it provides detailed bet information, including potential payout.
- **calculatePayout(stake, odds):** Calculates the potential payout of a bet based on the stake and odds.

#### Usage:

When an action is initiated by the user and requires confirmation, this component displays the action details and provides "Confirm" and "Cancel" buttons.

---

### analyze.js

**Location:** `pages/api/bet/analyze.js`

This API endpoint analyzes a user's bet request by interacting with OpenAI's GPT-4 model, providing a concise recommendation or analysis of the bet.

#### Workflow:

1. **Request Handling:**
   - Accepts a POST request with `gameId`, `selectedTeam`, `betAmount`, and `gameState`.
   - Verifies user authentication and rate limits the request to prevent abuse.
2. **AI Interaction:**
   - Formats the game state and bet details into a context for the AI.
   - Sends a request to OpenAI's GPT-4 model with a system prompt and user message.
3. **Response:**
   - Parses the AI's response and returns the analysis to the client.

#### Important Aspects:

- **Rate Limiting:** Ensures fair usage of the API.
- **Authentication:** Validates the user's token before processing.

---

### chat.js

**Location:** `pages/api/actions/chat.js`

Handles normal chat interactions and intent analysis within the application.

#### Key Functions:

- **handleNormalChat(messages):** Processes regular chat messages, incorporating an AI assistant that follows specific guidelines for responses.
- **analyzeIntent(message):** Extracts intent and structured data from the AI's response, attempting to parse JSON objects for further action.

#### System Prompts:

Defines the AI assistant's behavior, emphasizing:

- Friendly and helpful demeanor.
- Response formats (conversational first, then JSON intent).
- Specific handling for basketball queries and betting actions.

#### Error Handling:

- Includes mechanisms to fix unquoted JSON keys and parse malformed JSON to robustly extract the user's intent.

---

### venice.js

**Location:** `utils/venice.js`

Provides utility functions for interacting with Venice AI's API, generating AI responses, and handling image text extraction.

#### Key Functions:

- **generateAIResponse(messages):** Sends a chat completion request to Venice AI, ensuring message formatting and error handling.
- **extractTextFromImage(imageFile):** Converts images to base64 and extracts text using Venice AI's vision model.
- **fileToBase64(file):** Helper function to convert files to base64 strings.

#### Features:

- **Structured Basketball Query Types:** Defines constants for various basketball-related queries.
- **Error Handling:** Robustly handles API errors and malformed responses, providing default messages when necessary.

#### Notes:

- Utilizes environment variable `VENICE_API_KEY` for authentication.
- Incorporates AI models like `llama-3.3-70b` for generating responses.

---

### index.js

**Location:** `pages/index.js`

The main entry point of the Next.js application, responsible for rendering the home page and managing user authentication state.

#### Components:

- **LoginForm & SignupForm:** Rendered based on the user's authentication state.
- **ChatContainer:** Displays the chat interface when the user is authenticated.
- **Scoreboard:** (Imported but not detailed) Likely displays live sports scores.

#### Features:

- **Responsive Design:** Adjusts the displayed content based on authentication.
- **SEO Optimization:** Includes meta tags for search engines and social media sharing.
- **Dynamic Backgrounds:** Uses CSS for visual enhancements and animations.

#### Workflow:

1. **Authentication Check:** Determines if the user is logged in by checking local storage.
2. **Conditional Rendering:** Displays login/signup forms or the chat interface accordingly.
3. **Event Handling:** Provides buttons for toggling between login and signup forms.

---

### mongodb.js

**Location:** `utils/mongodb.js`

Manages the MongoDB connection and provides helper functions for database operations.

#### Key Functions:

- **connectDB():** Establishes a connection to MongoDB, with caching to prevent multiple simultaneous connections.
- **getUser(userId):** Retrieves a user from the database by ID.
- **getUserBalance(userId):** Fetches the token balance of a user.

#### Features:

- **Environment Configuration:** Requires `MONGODB_URI` to be set in environment variables.
- **Error Handling:** Throws errors when mandatory configurations are missing.
- **Mongoose Integration:** Uses Mongoose for object modeling.

---

### convoAnalyze.js

**Location:** `utils/convoAnalyze.js`

Analyzes user conversations to determine intents and handles actions accordingly.

#### Key Functions:

- **analyzeConversation(messages, options):** Processes messages to extract intents using AI-generated responses.
- **handleAction(action, userId, token, gameState):** Executes actions that have been confirmed by the user, such as placing bets or adding tokens.

#### Workflow:

1. **Intent Detection:**
   - Uses AI responses to determine the user's intent.
   - Parses JSON data from AI messages to extract structured intents.
2. **Action Handling:**
   - For recognized actions (e.g., `add_tokens`, `place_bet`), the corresponding functions are called.
   - Validates required fields and handles errors gracefully.
3. **Basketball Queries:**
   - Processes basketball-related queries and fetches data using external APIs (assumed to be implemented in `nbaApi.js`).

#### Features:

- **Supports Multiple Intents:** Handles a variety of actions, including balance checks and betting.
- **Robust Parsing:** Extracts and fixes JSON from AI responses even when formatting is inconsistent.
- **Error Handling:** Ensures that user feedback is provided in case of missing data or processing errors.

---

### process.js (Chat)

**Location:** `pages/api/chat/process.js`

API endpoint for processing chat messages, integrating conversation analysis and action handling.

#### Workflow:

1. **Request Validation:**
   - Ensures the request is a POST method.
   - Verifies user token and connects to the database.
2. **Conversation Handling:**
   - Retrieves or creates a conversation for the user.
   - Appends new user messages to the conversation history.
3. **Confirmation of Actions:**
   - If a `confirmAction` is present, it executes the action via `handleAction`.
   - Handles specific actions like placing bets or checking balance.
4. **Response Generation:**
   - Analyzes the conversation using `analyzeConversation`.
   - Saves the assistant's response in the conversation history.
   - Returns the response to the client.

#### Features:

- **Error Handling:** Catches and logs errors, providing meaningful feedback to the client.
- **Session Management:** Ensures the user's session is valid before processing.
- **Intent-Specific Responses:** Handles various intents, including viewing bets and token balances.

---

### process.js (Bet)

**Location:** `pages/api/bet/process.js`

API endpoint for processing bet descriptions, converting natural language into structured bet slips.

#### Workflow:

1. **Request Handling:**
   - Accepts a bet description and optional game state.
   - Verifies authentication and applies rate limiting.
2. **AI Interaction:**
   - Constructs a context with detailed instructions for the AI assistant.
   - Uses OpenAI's GPT-4 model to parse the bet description.
3. **Response Parsing:**
   - Attempts to parse the AI's response into a JSON object.
   - Validates required fields and calculates payout if necessary.
4. **Response to Client:**
   - Returns the structured bet slip to the client for confirmation.

#### Features:

- **Strict Instructions to AI:** Provides examples and rules to ensure consistent JSON output.
- **Error Handling:** Manages parsing errors and provides feedback if the bet structure is invalid.
- **Integration with Frontend:** Presents the bet slip in a format suitable for rendering in the client's UI.

---

## Flow of User Interaction

1. **User Accesses the Application:**
   - Visits the home page rendered by `index.js`.
2. **Authentication:**
   - Logs in or signs up using `LoginForm` or `SignupForm`.
3. **Chat Interaction:**
   - Once authenticated, the `ChatContainer` interface is displayed.
   - User sends messages, which are processed by `process.js` (Chat).
4. **Message Processing:**
   - Messages are analyzed for intents using `convoAnalyze.js`.
   - AI responses are generated using `venice.js` or OpenAI's API.
5. **Action Confirmation:**
   - If an action (e.g., placing a bet) is initiated, a confirmation dialog is displayed using `ActionConfirmation.js`.
6. **Action Execution:**
   - Upon confirmation, `process.js` (Chat) calls `handleAction` to execute the action.
   - For bet placements, `process.js` (Bet) may be involved in processing the bet slip.
7. **Database Updates:**
   - User data and conversation history are stored or updated via `mongodb.js`.
8. **Response Delivery:**
   - The assistant's response is sent back to the client and displayed in the chat interface.
9. **Continuation:**
   - The user continues the interaction, and the cycle repeats.

---

## Environment Variables

- **`VENICE_API_KEY`:** API key for Venice AI services (used in `venice.js`).
- **`OPENAI_API_KEY`:** API key for OpenAI services (used in `analyze.js` and `process.js` for bets).
- **`MONGODB_URI`:** Connection string for MongoDB (used in `mongodb.js`).
- **Other Variables:** May include settings for rate limiting or external API configurations.

---

## Additional Notes

- **Error Handling and Logging:**
  - Extensive console logging is used throughout the code for debugging.
  - Errors are caught and handled gracefully, with user-friendly messages.
- **Security:**
  - User authentication is enforced on API routes, with token verification.
  - Rate limiting is applied to prevent abuse of API endpoints.
- **AI Models:**
  - Both Venice AI and OpenAI models are used for generating responses and analyzing intents.
  - Care is taken to parse and validate AI responses to ensure reliable operation.
- **Front-End Components:**
  - Components are styled and animated for a modern user experience.
  - React hooks and state management are used to handle authentication status and form toggling.
- **Database Interaction:**
  - Mongoose models (e.g., `User`, `Bet`, `Conversation`) are used to interact with MongoDB.
  - Database operations are abstracted via helper functions for reusability.

---

This comprehensive overview should provide a clear understanding of how the application operates, the role of each key file, and the interactions between components. The emphasis on AI integration, user interaction flow, and robust error handling ensures that the application delivers a seamless experience to users engaging in sports betting activities.

---
